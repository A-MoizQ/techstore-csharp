@page "/profile/{Username}"
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Components.Authorization
@inject HttpClient Http
@inject NavigationManager Navigation
@inject CustomAuthStateProvider AuthStateProvider
@inject IJSRuntime JSRuntime

<NavBar />

@if (isLoading)
{
    <p>Loading profile...</p>
}
else if (!isAuthenticated)
{
    <p>Redirecting to login...</p>
}
else if (notFound)
{
    <div class="admin-container">
        <div class="admin-form">
            <h3 class="admin-title">Create Your Profile</h3>

            <EditForm Model="profileForm" OnValidSubmit="SaveProfile">
                <label>Full Name:</label>
                <InputText @bind-Value="profileForm.Name" class="input-text" />

                <label>Address:</label>
                <InputText @bind-Value="profileForm.Address" class="input-text" />

                <label>Wallet Balance:</label>
                <InputNumber @bind-Value="profileForm.WalletBalance" class="input-text" />

                <label>Profile Image:</label>
                <InputFile OnChange="OnImageSelected" />

                <button type="submit">Save Profile</button>
            </EditForm>

            @if (!string.IsNullOrEmpty(message))
            {
                <p class="admin-message">@message</p>
            }
        </div>
    </div>
}
else
{
    <div class="profile-container">
        <div class="profile-left">
            <div class="profile-header">
                @if (!string.IsNullOrEmpty(profile.Image))
                {
                    <img src="@GetProfileImageSrc()" alt="Profile Image" />
                }
                else
                {
                    <img src="images/default-pfp.png" alt="Default Profile Image" />
                }
                <h2>@profile.Name</h2>
            </div>

            <div class="profile-details">
                <p>@profile.Uname</p>
                <p>@profile.Address</p>
                <p>Total Transactions : @profile.TotalTransactions</p>
            </div>
        </div>

        <div class="profile-right">
            <div class="wallet-section">
                <h3>Wallet</h3>
                <div class="balance">Balance : @profile.WalletBalance rs</div>
                <button>+50 rs</button>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public string Username { get; set; } = string.Empty;

    private bool isLoading = true;
    private bool isAuthenticated;
    private bool notFound;
    private string message = string.Empty;

    private ProfileData? profile;
    private ProfileForm profileForm = new();

    private IBrowserFile? selectedImage;

    protected override async Task OnInitializedAsync()
    {
        var state = await AuthStateProvider.GetAuthenticationStateAsync();
        isAuthenticated = state.User.Identity?.IsAuthenticated ?? false;

        if (!isAuthenticated)
        {
            isLoading = false;
            await RedirectToLogin();
            return;
        }

        await LoadProfile();
        isLoading = false;
    }

    private async Task LoadProfile()
    {
        try
        {
            profile = await Http.GetFromJsonAsync<ProfileData>($"profile/{Username}?t={DateTime.Now.Ticks}");
            notFound = profile is null;
        }
        catch (HttpRequestException ex) when (ex.Message.Contains("404"))
        {
            notFound = true;
        }
        catch (Exception ex)
        {
            message = ex.Message;
        }
    }

    private async Task RedirectToLogin()
    {
        Navigation.NavigateTo("/loginSignup");
    }

    private async Task SaveProfile()
    {
        message = "";

        try
        {
            if (selectedImage != null)
            {
                using var stream = selectedImage.OpenReadStream(5 * 1024 * 1024);
                using var ms = new MemoryStream();
                await stream.CopyToAsync(ms);
                profileForm.ImageBase64 = Convert.ToBase64String(ms.ToArray());
            }

            var response = await Http.PostAsJsonAsync($"profile/{Username}", profileForm);
            
            if (response.IsSuccessStatusCode)
            {
                message = "Profile saved!";
                await LoadProfile();
                notFound = false;
                StateHasChanged();
            }
            else
            {
                message = await response.Content.ReadAsStringAsync();
            }
        }
        catch (Exception ex)
        {
            message = $"Error saving profile: {ex.Message}";
        }
    }

    private void OnImageSelected(InputFileChangeEventArgs e)
    {
        selectedImage = e.File;
    }

    private string GetProfileImageSrc()
    {
         return $"data:image/png;base64,{profile?.Image}";
    }

    class ProfileData
    {
        public string Uname { get; set; } = "";
        public string Name { get; set; } = "";
        public string Address { get; set; } = "";
        public string? Image { get; set; }
        public double WalletBalance { get; set; }
        public int ItemsBought { get; set; }
        public int TotalTransactions { get; set; }
    }

    class ProfileForm
    {
        public string Name { get; set; } = "";
        public string Address { get; set; } = "";
        public double WalletBalance { get; set; }
        public string? ImageBase64 { get; set; }
    }
}
