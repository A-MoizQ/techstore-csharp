@page "/profile/{Username}"
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Components.Authorization
@inject HttpClient Http
@inject NavigationManager Navigation
@inject CustomAuthStateProvider AuthStateProvider
@inject IJSRuntime JSRuntime

<NavBar />

@if (isLoading)
{
    <p>Loading profile...</p>
}
else if (!isAuthenticated)
{
    <p>Redirecting to login...</p>  @* Show this while redirecting *@
}
else if (notFound)
{
    <h3>Create Your Profile</h3>
    <EditForm Model="profileForm" OnValidSubmit="SaveProfile">
        <InputText @bind-Value="profileForm.Name" placeholder="Full Name" /><br/>
        <InputText @bind-Value="profileForm.Address" placeholder="Address" /><br/>
        <InputNumber @bind-Value="profileForm.WalletBalance" placeholder="Wallet Balance" /><br/>
        <InputFile OnChange="OnImageSelected" /><br/>
        <button type="submit">Save Profile</button>
    </EditForm>
    @if (!string.IsNullOrEmpty(message))
    {
        <p>@message</p>
    }
}
else
{
    <h3>@profile.Name's Profile</h3>
    @if (!string.IsNullOrEmpty(profile.ImageBase64))
    {
        <img src="data:image/png;base64,@profile.ImageBase64" alt="Profile Image" width="150" /><br/>
    }
    <p><strong>Name:</strong> @profile.Name</p>
    <p><strong>Address:</strong> @profile.Address</p>
    <p><strong>Wallet:</strong> @profile.WalletBalance</p>
    <p><strong>Items Bought:</strong> @profile.ItemsBought</p>
    <p><strong>Total Transactions:</strong> @profile.TotalTransactions</p>
}

@code {
    [Parameter] public string Username { get; set; } = string.Empty;

    private bool isLoading = true;
    private bool isAuthenticated;
    private bool notFound;
    private string message = string.Empty;

    private ProfileData? profile;
    private ProfileForm profileForm = new();

    protected override async Task OnInitializedAsync()
    {
        // Check authentication state
        var state = await AuthStateProvider.GetAuthenticationStateAsync();
        isAuthenticated = state.User.Identity?.IsAuthenticated ?? false;
        if (!isAuthenticated) 
        {
            isLoading = false;
            await RedirectToLogin();  // Redirect asynchronously
            return;
        }

        // Load profile data
        try
        {
            profile = await Http.GetFromJsonAsync<ProfileData>($"profile/{Username}");
            if (profile is null)
                notFound = true;
            else
                notFound = false;
        }
        catch (HttpRequestException ex) when (ex.Message.Contains("404"))
        {
            notFound = true;
        }
        catch (Exception ex)
        {
            message = ex.Message;
        }
        isLoading = false;
    }

    private async Task RedirectToLogin()
    {
        Navigation.NavigateTo("/loginSignup");  // Redirect to login page
    }

    private async Task SaveProfile()
    {
        message = "";
        // Convert image file to base64 if selected
        if (selectedImage != null)
        {
            using var stream = selectedImage.OpenReadStream(5 * 1024 * 1024);  // 5MB max file size
            using var ms = new MemoryStream();
            await stream.CopyToAsync(ms);
            profileForm.ImageBase64 = Convert.ToBase64String(ms.ToArray());
        }

        var response = await Http.PostAsJsonAsync($"profile/{Username}", profileForm);
        if (response.IsSuccessStatusCode)
        {
            message = "Profile saved!";
            // Reload profile after saving
            profile = await Http.GetFromJsonAsync<ProfileData>($"profile/{Username}");
            notFound = false;
        }
        else
        {
            message = await response.Content.ReadAsStringAsync();
        }
    }

    private IBrowserFile? selectedImage;
    private void OnImageSelected(InputFileChangeEventArgs e)
    {
        selectedImage = e.File;
    }

    class ProfileData
    {
        public string Uname { get; set; } = "";
        public string Name { get; set; } = "";
        public string Address { get; set; } = "";
        public string? ImageBase64 { get; set; }
        public double WalletBalance { get; set; }
        public int ItemsBought { get; set; }
        public int TotalTransactions { get; set; }
    }

    class ProfileForm
    {
        public string Name { get; set; } = "";
        public string Address { get; set; } = "";
        public double WalletBalance { get; set; }
        public string? ImageBase64 { get; set; }
    }
}
