@page "/home"
@using System.Net.Http.Json
@inject HttpClient Http
@inject NavigationManager NavManager
@inject AuthenticationStateProvider AuthProvider
@inject IJSRuntime JS
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Web

<AuthorizeView>
    <Authorized>
        <NavBar />

        <div class="homepage-container">
            <h3 class="homepage-title">Homepage</h3>

            @if (homepageData == null)
            {
                <p>Loading homepage...</p>
            }
            else if (!string.IsNullOrEmpty(errorMessage))
            {
                <p style="color:red">@errorMessage</p>
            }
            else
            {
                <div class="products-section">
                    <h4 class="section-title">Top Selling Products</h4>

                    <div class="scroll-buttons-container">
                        <button @onclick="() => ScrollProducts(-1)" class="scroll-btn">◀</button>

                        <div class="products-list" @ref="productListRef">
                            @foreach (var product in homepageData.products.Take(10)) // just 10 for testing
                            {
                                <div class="product-card">
                                    <h5>@product.name</h5>
                                    @if (!string.IsNullOrEmpty(product.image))
                                    {
                                        <img src="data:image/jpeg;base64,@product.image" alt="@product.name" />
                                    }
                                    <p>@product.description</p>
                                    <p>⭐ Rating: @product.rating</p>
                                    <p>💰 Price: @product.price PKR</p>
                                </div>
                            }
                        </div>

                        <button @onclick="() => ScrollProducts(1)" class="scroll-btn">▶</button>
                    </div>
                </div>

                <div class="categories-section">
                    <h4 class="section-title">Categories</h4>

                    <div class="scroll-buttons-container">
                        <button @onclick="ScrollCategoriesLeft" class="scroll-btn">◀</button>

                        <div class="categories-list" @ref="categoriesListRef">
                            @foreach (var cat in homepageData.categories)
                            {
                                <div class="category-card">
                                    <h5>@cat.category</h5>
                                    @if (!string.IsNullOrEmpty(cat.image))
                                    {
                                        <img src="data:image/jpeg;base64,@cat.image" alt="@cat.category" />
                                    }
                                </div>
                            }
                        </div>

                        <button @onclick="ScrollCategoriesRight" class="scroll-btn">▶</button>
                    </div>
                </div>

            }
        </div>
    </Authorized>
</AuthorizeView>

@code {
    private HomepageData? homepageData;
    private string errorMessage = string.Empty;
    private ElementReference productListRef;
    private const int scrollAmount = 300;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (!user.Identity.IsAuthenticated)
        {
            NavManager.NavigateTo("/loginSignup", forceLoad: true);
            return;
        }

        try
        {
            homepageData = await Http.GetFromJsonAsync<HomepageData>("homepage");
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }

    private async Task ScrollProducts(int direction)
    {
        await JS.InvokeVoidAsync("scrollElementHorizontally", productListRef, direction * scrollAmount);
    }

    private ElementReference categoriesListRef;

    private async Task ScrollCategoriesLeft()
    {
        await JS.InvokeVoidAsync("scrollElementHorizontally", categoriesListRef, -scrollAmount);
    }

    private async Task ScrollCategoriesRight()
    {
        await JS.InvokeVoidAsync("scrollElementHorizontally", categoriesListRef, scrollAmount);
    }


    public class HomepageData
    {
        public List<Product> products { get; set; } = new();
        public List<CategoryDisplay> categories { get; set; } = new();
    }

    public class Product
    {
        public int id { get; set; }
        public string name { get; set; } = string.Empty;
        public string? description { get; set; }
        public string? image { get; set; }
        public int rating { get; set; }
        public double price { get; set; }
        public bool isTop { get; set; }
    }

    public class CategoryDisplay
    {
        public string category { get; set; } = string.Empty;
        public string? image { get; set; }
    }
}
