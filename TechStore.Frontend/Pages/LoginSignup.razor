@page "/loginSignup"
@inject HttpClient Http
@inject NavigationManager Navigation
@inject CustomAuthStateProvider AuthStateProvider

<link href="css/site.css" rel="stylesheet" />

<div class="auth-container">
    <div class="auth-box">
        <!-- Toggle Tabs -->
        <div class="tab-container">
            <button class="tab @(isSignup ? "active" : "")" @onclick="ShowSignup">SIGN UP</button>
            <button class="tab @(isSignup ? "" : "active")" @onclick="ShowLogin">LOG IN</button>
        </div>

        <!-- Login Form -->
        <div class="form-container" style="@(isSignup ? "display: none;" : "display: block;")">
            <div class="input-group">
                <label>Username *</label>
                <input type="text" @bind="Username" placeholder="Enter your username" />
            </div>

            <div class="input-group">
                <label>Password *</label>
                <input type="password" @bind="Password" placeholder="Enter password" />
            </div>

            <button class="btn primary-btn" @onclick="Login">Log In</button>

            <p class="switch-text">
                Don't have an account? <a href="#" @onclick="ShowSignup">Sign Up</a>
            </p>
        </div>

        <!-- Signup Form -->
        <div class="form-container" style="@(isSignup ? "display: block;" : "display: none;")">
            <div class="input-group">
                <label>Username *</label>
                <input type="text" @bind="Username" placeholder="Enter your username" />
            </div>

            <div class="input-group">
                <label>Password *</label>
                <input type="password" @bind="Password" placeholder="Enter password" />
            </div>

            <button class="btn primary-btn" @onclick="SignupUser">Sign up</button>

            <p class="switch-text">
                Already have an account? <a href="#" @onclick="ShowLogin">Sign In</a>
            </p>
        </div>
    </div>
</div>

<!-- Display User Messages -->
@if (!string.IsNullOrEmpty(Message))
{
    <p class="message @(IsSuccess ? "success-message" : "error-message")">@Message</p>
}

<style>
    .success-message {
        color: green;
        font-weight: bold;
        text-align: center;
        margin-top: 10px;
    }
    
    .error-message {
        color: red;
        font-weight: bold;
        text-align: center;
        margin-top: 10px;
    }
</style>

@code {
    private string Username { get; set; } = string.Empty;
    private string Password { get; set; } = string.Empty;
    private string Message { get; set; } = string.Empty;
    private bool IsSuccess { get; set; } = false;
    private bool isSignup { get; set; } = false;

    private void ShowSignup() => isSignup = true;
    private void ShowLogin() => isSignup = false;

    private async Task Login()
    {
        // Validate Empty Inputs
        if (string.IsNullOrWhiteSpace(Username) || string.IsNullOrWhiteSpace(Password))
        {
            Message = "Username and password are required!";
            IsSuccess = false;
            return;
        }

        var loginData = new { Username, Password };
        var response = await Http.PostAsJsonAsync("api/auth/login", loginData);
        var responseText = await response.Content.ReadAsStringAsync();

        if (response.IsSuccessStatusCode)
        {
            Message = "Login successful! Redirecting...";
            IsSuccess = true;
            AuthStateProvider.MarkUserAsAuthenticated(Username);
            await Task.Delay(1000); // Small delay for UX
            Navigation.NavigateTo("/home");
        }
        else
        {
            Message = responseText;
            IsSuccess = false;
        }
    }

    private async Task SignupUser()
    {
        // Validate Empty Inputs
        if (string.IsNullOrWhiteSpace(Username) || string.IsNullOrWhiteSpace(Password))
        {
            Message = "Username and password are required!";
            IsSuccess = false;
            return;
        }

        var signupData = new { Username, Password };
        var response = await Http.PostAsJsonAsync("api/auth/signup", signupData);
        var responseText = await response.Content.ReadAsStringAsync();

        if (response.IsSuccessStatusCode)
        {
            Message = "Signup successful! Please log in.";
            IsSuccess = true;
            ShowLogin();
        }
        else
        {
            Message = responseText;
            IsSuccess = false;
        }
    }
}
