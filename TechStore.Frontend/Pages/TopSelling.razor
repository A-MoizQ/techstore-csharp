@page "/topselling"
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Components.Authorization
@inject HttpClient Http
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthProvider
@inject IJSRuntime JS

<NavBar />

<div class="product-page">
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <p class="error">@errorMessage</p>
    }
    else if (products == null)
    {
        <p class="loading">Loading products...</p>
    }
    else if (products.Count == 0)
    {
        <p class="no-products">No top-selling products found.</p>
    }
    else
    {
        <div class="product-container">
            <button class="scroll-btn left" @onclick="ScrollLeft">◀</button>
            <div class="product-list" @ref="productListRef">
                @foreach (var product in products)
                {
                    <div class="product-card">
                        @if (!string.IsNullOrEmpty(product.image))
                        {
                            <img src="data:image/jpeg;base64,@product.image" alt="@product.name" class="product-image" />
                        }
                        <h4 class="product-title">@product.name</h4>
                        <p class="product-description">@product.description</p>
                        <p class="product-price">@($"{product.price} PKR")</p>
                        <p class="product-rating">@RenderStars(product.rating)</p>
                        <button class="btn add-to-cart-btn" @onclick="() => AddToCart(product.id)">Add to Cart</button>
                        <button class="btn add-to-cart-btn" @onclick="() => AddToWishlist(product.id)">Add to Wishlist</button>
                    </div>
                }
            </div>
            <button class="scroll-btn right" @onclick="ScrollRight">▶</button>
        </div>
    }
</div>

@code {
    private List<Product> products = new();
    private string errorMessage = string.Empty;
    private ElementReference productListRef;
    private const int scrollAmount = 300;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authState = await AuthProvider.GetAuthenticationStateAsync();
            if (authState.User.Identity?.IsAuthenticated != true)
            {
                Navigation.NavigateTo("/loginSignup", forceLoad: false);
                return;
            }

            products = await Http.GetFromJsonAsync<List<Product>>("topselling") ?? new List<Product>();
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }
    private async Task AddToWishlist(int productId)
    {
        var authState = await AuthProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (!user.Identity?.IsAuthenticated ?? true)
        {
            Navigation.NavigateTo("/login");
            return;
        }

        var payload = new
        {
            uname = user.Identity.Name,
            productId = productId
        };

        var response = await Http.PostAsJsonAsync("/wishlist", payload);
        if (!response.IsSuccessStatusCode)
        {
            var error = await response.Content.ReadAsStringAsync();
            Console.WriteLine($"Add to wishlist failed: {error}");
        }
    }


    private async Task AddToCart(int productId)
    {
        var authState = await AuthProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (!user.Identity?.IsAuthenticated ?? true)
        {
            Navigation.NavigateTo("/login");
            return;
        }

        var payload = new
        {
            uname = user.Identity.Name,
            productId = productId,
            quantity = 1
        };

        var response = await Http.PostAsJsonAsync("/cart", payload);
        if (!response.IsSuccessStatusCode)
        {
            var error = await response.Content.ReadAsStringAsync();
            Console.WriteLine($"Add to cart failed: {error}");
        }
    }

    private string RenderStars(int rating)
    {
        return new string('⭐', rating) + new string('☆', 5 - rating);
    }

    private async Task ScrollLeft()
    {
        await JS.InvokeVoidAsync("scrollElementHorizontally", productListRef, -scrollAmount);
    }

    private async Task ScrollRight()
    {
        await JS.InvokeVoidAsync("scrollElementHorizontally", productListRef, scrollAmount);
    }

    public class Product
    {
        public int id { get; set; }
        public string name { get; set; } = string.Empty;
        public string? description { get; set; }
        public string? image { get; set; }
        public int rating { get; set; }
        public double price { get; set; }
        public bool isTop { get; set; }
    }
}
