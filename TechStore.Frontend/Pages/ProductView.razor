@page "/product/{id:int}"
@using System.Net.Http.Json
@inject HttpClient Http
@inject NavigationManager NavManager
@inject AuthenticationStateProvider AuthProvider
@using Microsoft.AspNetCore.Components.Authorization

<AuthorizeView>
    <Authorized>
        <NavBar />

        <div class="product-container">
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <p class="error-message">@errorMessage</p>
            }
            else if (product == null)
            {
                <p class="loading-message">Loading product...</p>
            }
            else
            {
                <div class="product-card">
                    <div class="product-image">
                        @if (!string.IsNullOrEmpty(product.image))
                        {
                            <img src="data:image/jpeg;base64,@product.image" alt="@product.name" />
                        }
                        else
                        {
                            <div class="placeholder">Image</div>
                        }
                    </div>

                    <div class="product-details">
                        <h2>@product.name</h2>
                        <div class="rating">
                            @for (int i = 1; i <= 5; i++)
                            {
                                if (i <= product.rating)
                                {
                                    <span class="star full">★</span>
                                }
                                else
                                {
                                    <span class="star empty">☆</span>
                                }
                            }
                        </div>
                        <p class="price">@product.price Pkr</p>
                        <p class="description">@product.description</p>
                        <button class="add-to-cart">Add to cart</button>
                    </div>
                </div>
            }
        </div>
    </Authorized>
</AuthorizeView>

@code {
    [Parameter]
    public int id { get; set; }

    private Product? product;
    private string errorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (!user.Identity.IsAuthenticated)
        {
            NavManager.NavigateTo("/loginSignup", forceLoad: true);
            return;
        }

        try
        {
            product = await Http.GetFromJsonAsync<Product>($"product/{id}");
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }

    public class Product
    {
        public int id { get; set; }
        public string name { get; set; } = string.Empty;
        public string? description { get; set; }
        public string? category { get; set; }
        public string? image { get; set; }
        public int rating { get; set; }
        public double price { get; set; }
        public bool isTop { get; set; }
    }
}
