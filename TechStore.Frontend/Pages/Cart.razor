@page "/cart"
@inject HttpClient Http
@inject NavigationManager Navigation
@inject CustomAuthStateProvider AuthStateProvider
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Components.Authorization

<NavBar />

<div class="cart-container">
    <div class="cart-left">
        <h2 class="cart-title">Wishlist / Checkout</h2>

        @if (!IsAuthenticated)
        {
            <p class="empty-msg">Please log in to view your cart.</p>
        }
        else if (CartItems.Count == 0)
        {
            <p class="empty-msg">No items in your cart.</p>
        }
        else
        {
            @foreach (var item in CartItems)
            {
                <div class="cart-item">
                    <div class="product-image">
                        @if (!string.IsNullOrEmpty(item.ProductImage))
                        {
                            <img src="data:image/png;base64,@item.ProductImage" />
                        }
                        else
                        {
                            <div class="image-placeholder">Image</div>
                        }
                    </div>

                    <div class="product-info">
                        <h3 class="product-name">@item.ProductName</h3>
                        <p class="product-price">@item.ProductPrice Pkr</p>
                        <button class="btn remove-btn" @onclick="() => RemoveItem(item.CartId)">-</button>
                        <button class="view-btn">View Product</button>
                    </div>
                </div>
            }

            <button class="btn checkout-btn" @onclick="ProceedToCheckout">
                Proceed to checkout / Cart
            </button>
        }
    </div>

    <div class="cart-right">
        <h2 class="wallet-title">Wallet</h2>
        <p class="wallet-balance">Balance : @UserBalance rs :(</p>
        <button class="wallet-btn">+@TotalPrice rs</button>
    </div>
</div>


@code {
    private List<CartItem> CartItems { get; set; } = new();
    private double TotalPrice => CartItems.Sum(x => x.ProductPrice * x.Quantity);
    private double UserBalance = 0; // Placeholder - integrate with real wallet
    private string CurrentUser = string.Empty;
    private bool IsAuthenticated = false;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            IsAuthenticated = true;
            CurrentUser = user.Identity.Name ?? "guest";
            await LoadCart();
        }
        else
        {
            Navigation.NavigateTo("/login", true);
        }
    }

    private async Task LoadCart()
    {
        var result = await Http.GetFromJsonAsync<List<CartItem>>($"cart/{CurrentUser}");
        if (result != null)
            CartItems = result;
    }

    private async Task RemoveItem(int cartId)
    {
        var item = CartItems.FirstOrDefault(x => x.CartId == cartId);
        if (item != null)
        {
            await UpdateCart(item.ProductId, -1);
        }
    }

    private async Task UpdateCart(int productId, int quantity)
    {
        var payload = new
        {
            uname = CurrentUser,
            productId = productId,
            quantity = quantity
        };

        var response = await Http.PostAsJsonAsync("/cart", payload);
        if (response.IsSuccessStatusCode)
        {
            await LoadCart(); // Refresh the cart after update
        }
        else
        {
            var error = await response.Content.ReadAsStringAsync();
            Console.WriteLine($"Cart update failed: {error}");
        }
    }

    private void ProceedToCheckout()
    {
        Navigation.NavigateTo("/checkout");
    }

    public class CartItem
    {
        public int CartId { get; set; }
        public int ProductId { get; set; }
        public string ProductName { get; set; } = "";
        public string? ProductImage { get; set; }
        public double ProductPrice { get; set; }
        public int Quantity { get; set; }
    }
}
