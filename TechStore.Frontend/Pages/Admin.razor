@page "/admin"
@inject HttpClient Http
@inject NavigationManager Navigation
@using Microsoft.AspNetCore.WebUtilities
@inject CustomAuthStateProvider AuthStateProvider
@using Microsoft.AspNetCore.Components.Forms

<NavBar />

@if (CurrentTab == "products")
{
    <h3 class="admin-title">Add Product</h3>

    <div class="admin-container">
        <div class="admin-form">
            <label>Name:</label>
            <input @bind="Name" placeholder="Product Name" />

            <label>Description:</label>
            <textarea @bind="Description" placeholder="Product Description"></textarea>

            <label>Category:</label>
            <input @bind="Category" placeholder="Product Category" />

            <label>Rating (1-5):</label>
            <input type="number" @bind="Rating" min="1" max="5" />

            <label>Price:</label>
            <input type="number" @bind="Price" step="0.01" />

            <label>Top Product:</label>
            <input type="checkbox" @bind="IsTop" />

            <label>Image:</label>
            <InputFile OnChange="HandleImageUpload" />

            <button @onclick="SubmitProduct">Add Product</button>
        </div>
    </div>
}
else if (CurrentTab == "faq")
{
    <h3 class="admin-title">Add FAQ</h3>

    <div class="admin-container">
        <div class="admin-form">
            <label>Question:</label>
            <input @bind="FaqQuestion" placeholder="FAQ Question" />

            <label>Answer:</label>
            <textarea @bind="FaqAnswer" placeholder="FAQ Answer"></textarea>

            <button @onclick="SubmitFAQ">Add FAQ</button>
        </div>
    </div>
}
else if (CurrentTab == "reviews")
{
    <h3 class="admin-title">Add Review</h3>

    <div class="admin-container">
        <div class="admin-form">
            <label>Product Name:</label>
            <input @bind="ReviewProductName" placeholder="Enter product name" />

            <label>Video File (MP4):</label>
            <InputFile OnChange="HandleVideoUpload" accept="video/mp4" />

            <button @onclick="SubmitReview">Upload Review</button>
        </div>
    </div>
}

<p class="admin-message">@Message</p>

@code {
    private string CurrentTab = "products";

    private string Name { get; set; } = string.Empty;
    private string Description { get; set; } = string.Empty;
    private string Category { get; set; } = string.Empty;
    private int Rating { get; set; } = 1;
    private double Price { get; set; } = 0.0;
    private bool IsTop { get; set; } = false;
    private IBrowserFile? SelectedImage { get; set; }

    private string FaqQuestion { get; set; } = string.Empty;
    private string FaqAnswer { get; set; } = string.Empty;

    private string Message { get; set; } = string.Empty;
    private bool IsSuperuser { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {

        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        IsSuperuser = user.IsInRole("superuser");
        if (!IsSuperuser)
            Navigation.NavigateTo("/home");
    }

    protected override async Task OnParametersSetAsync()
    {
        var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
        var query = QueryHelpers.ParseQuery(uri.Query);
        if (query.TryGetValue("tab", out var tabValue))
        {
            CurrentTab = tabValue!;
        }
        else
        {
            CurrentTab = "products"; // fallback
        }

        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        IsSuperuser = user.IsInRole("superuser");
        if (!IsSuperuser)
            Navigation.NavigateTo("/home");

        StateHasChanged();
    }


    private void HandleImageUpload(InputFileChangeEventArgs e)
    {
        if (e.FileCount > 0)
        {
            SelectedImage = e.File;
        }
    }

    private async Task SubmitProduct()
    {
        if (string.IsNullOrWhiteSpace(Name) || Price <= 0)
        {
            Message = "Product name and price are required!";
            return;
        }

        var formData = new MultipartFormDataContent
        {
            { new StringContent(Name), "name" },
            { new StringContent(Description), "description" },
            { new StringContent(Category), "category" },
            { new StringContent(Rating.ToString()), "rating" },
            { new StringContent(Price.ToString()), "price" },
            { new StringContent(IsTop ? "1" : "0"), "isTop" }
        };

        if (SelectedImage != null)
        {
            var stream = SelectedImage.OpenReadStream(10 * 1024 * 1024);
            var imageContent = new StreamContent(stream);
            imageContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(SelectedImage.ContentType);
            formData.Add(imageContent, "image", SelectedImage.Name);
        }

        var response = await Http.PostAsync("/admin", formData);
        Message = response.IsSuccessStatusCode 
            ? "Product added successfully!" 
            : await response.Content.ReadAsStringAsync();
    }

    private async Task SubmitFAQ()
    {
        if (string.IsNullOrWhiteSpace(FaqQuestion) || string.IsNullOrWhiteSpace(FaqAnswer))
        {
            Message = "FAQ question and answer required.";
            return;
        }

        var faqEntry = new
        {
            Question = FaqQuestion,
            Answer = FaqAnswer
        };

        var response = await Http.PostAsJsonAsync("faqs", faqEntry);
        Message = response.IsSuccessStatusCode 
            ? "FAQ added successfully!" 
            : await response.Content.ReadAsStringAsync();

        FaqQuestion = string.Empty;
        FaqAnswer = string.Empty;
    }

    private string ReviewProductName { get; set; } = string.Empty;
    private IBrowserFile? ReviewVideoFile { get; set; }

    private void HandleVideoUpload(InputFileChangeEventArgs e)
    {
        if (e.FileCount > 0)
            ReviewVideoFile = e.File;
    }

    private async Task SubmitReview()
    {
        if (string.IsNullOrWhiteSpace(ReviewProductName) || ReviewVideoFile == null)
        {
            Message = "Product name and video are required.";
            return;
        }

        var formData = new MultipartFormDataContent
        {
            { new StringContent(ReviewProductName), "productName" }
        };

        var stream = ReviewVideoFile.OpenReadStream(50 * 1024 * 1024); // up to 50 MB
        var videoContent = new StreamContent(stream);
        videoContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue("video/mp4");
        formData.Add(videoContent, "video", ReviewVideoFile.Name);

        var response = await Http.PostAsync("/admin/reviews", formData);
        Message = response.IsSuccessStatusCode
            ? "Review uploaded successfully!"
            : await response.Content.ReadAsStringAsync();

        ReviewProductName = string.Empty;
        ReviewVideoFile = null;
    }

}
