@page "/products"
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Components.Authorization
@inject HttpClient Http
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthProvider

<NavBar />

<h3 class="page-title">Products</h3>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <p class="error">@errorMessage</p>
}
else if (filteredProducts == null)
{
    <p class="loading">Loading products...</p>
}
else if (filteredProducts.Count == 0)
{
    <p class="no-products">No products available.</p>
}
else
{
    <nav class="category-navbar">
        @foreach (var cat in categories)
        {
            <button class="category-button @(selectedCategory == cat ? "active" : "")"
                    @onclick="() => FilterProducts(cat)">
                @cat
            </button>
        }
    </nav>

    <div class="product-grid">
        @for (int i = 0; i < filteredProducts.Count; i += 2)
        {
            <div class="product-row">
                <div class="product-card">@RenderProduct(filteredProducts[i])</div>
                @if (i + 1 < filteredProducts.Count)
                {
                    <div class="product-card">@RenderProduct(filteredProducts[i + 1])</div>
                }
            </div>
        }
    </div>
}

@code {
    private List<Product> allProducts = new();
    private List<Product> filteredProducts = new();
    private List<string> categories = new();
    private string? selectedCategory;
    private string errorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity?.IsAuthenticated != true)
        {
            Navigation.NavigateTo("/loginSignup");
            return;
        }

        try
        {
            allProducts = await Http.GetFromJsonAsync<List<Product>>("api/products")
                          ?? new List<Product>();

            categories = allProducts
                .Select(p => p.Category)
                .Distinct()
                .ToList();

            filteredProducts = new List<Product>(allProducts);
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }

    private void FilterProducts(string category)
    {
        selectedCategory = category;
        filteredProducts = allProducts
            .Where(p => p.Category == category)
            .ToList();
    }

    private RenderFragment RenderProduct(Product p) => __builder =>
    {
        <div class="product-card-inner">
            <div class="product-image">
                @if (!string.IsNullOrEmpty(p.Image))
                {
                    <img src="data:image/jpeg;base64,@p.Image" alt="@p.Name" />
                }
                else
                {
                    <div class="placeholder">No Image</div>
                }
            </div>
            <div class="product-info">
                <h4>@p.Name</h4>
                <div class="product-rating">
                    @for (int i = 0; i < 5; i++)
                    {
                        <span>@(i < p.Rating ? "⭐" : "☆")</span>
                    }
                </div>
                <p>@($"{p.Price} PKR")</p>
                <p><strong>Description:</strong><br />@p.Description</p>
                <button class="btn add-to-cart-btn" @onclick="() => AddToCart(p.Id)">Add to cart</button>
                <button class="btn add-to-cart-btn" @onclick="() => AddToWishlist(p.Id)">Add to Wishlist</button>
                <button class="btn view-product-btn" @onclick='() => Navigation.NavigateTo($"/product/{p.Id}")'>
                    View Product
                </button>
            </div>
        </div>;
    };

    private async Task AddToWishlist(int productId)
    {
        var authState = await AuthProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (!user.Identity?.IsAuthenticated ?? true)
        {
            Navigation.NavigateTo("/loginSignup");
            return;
        }

        var payload = new
        {
            uname = user.Identity.Name,
            productId = productId
        };

        try
        {
            var response = await Http.PostAsJsonAsync("/wishlist", payload);
            if (!response.IsSuccessStatusCode)
            {
                var error = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Failed to add to wishlist: {error}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error adding to wishlist: {ex.Message}");
        }
    }


    private async Task AddToCart(int productId)
    {
        var authState = await AuthProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            var uname = user.Identity.Name ?? "guest";

            var payload = new
            {
                uname = uname,
                productId = productId,
                quantity = 1 // default quantity
            };

            try
            {
                var response = await Http.PostAsJsonAsync("/cart", payload);
                if (response.IsSuccessStatusCode)
                {
                    Console.WriteLine($"Product {productId} added to cart.");
                    // Optionally show a toast/snackbar
                }
                else
                {
                    var error = await response.Content.ReadAsStringAsync();
                    Console.WriteLine($"Failed to add to cart: {error}");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error adding to cart: {ex.Message}");
            }
        }
        else
        {
            Navigation.NavigateTo("/loginSignup");
        }
    }

    public class Product
    {
        public int Id { get; set; }
        public string Name { get; set; } = string.Empty;
        public string? Description { get; set; }
        public string Category { get; set; } = string.Empty;
        public string? Image { get; set; }
        public int Rating { get; set; }
        public double Price { get; set; }
        public bool IsTop { get; set; }
    }
}
