@namespace TechStore.Frontend.Shared
@inject NavigationManager Navigation
@inject CustomAuthStateProvider AuthStateProvider
@using Microsoft.AspNetCore.Components.Authorization
@inject IJSRuntime JSRuntime

<AuthorizeView>
    <Authorized Context="authContext">
        <nav class="navbar">
            <div class="nav-left">
                <h1 class="logo">Tech Store</h1>
            </div>
            <div class="nav-center">
                <input type="text" placeholder="Search..." class="search-bar" />
                <button class="search-button">üîç</button>
            </div>
            <div class="nav-right">
                <a @onclick="@(() => NavigateTo("/home"))" class="nav-link">Home</a>
                <a @onclick="@(() => NavigateTo("/topselling"))" class="nav-link">Top Selling</a>
                <a @onclick="@(() => NavigateTo("/products"))" class="nav-link">Products</a>
                @if (authContext.User.IsInRole("superuser"))
                {
                    <a @onclick="@(() => NavigateTo("/admin"))" class="nav-link">Admin</a>
                }
                <a @onclick="@Logout" class="nav-link">Logout</a>
                <div class="cart-icon">üõí</div>
            </div>
        </nav>
    </Authorized>
    <NotAuthorized>
        <nav class="navbar">
            <div class="nav-left">
                <h1 class="logo">Tech Store</h1>
            </div>
            <div class="nav-center">
                <input type="text" placeholder="Search..." class="search-bar" />
                <button class="search-button">üîç</button>
            </div>
            <div class="nav-right">
                <a @onclick="@(() => NavigateTo("/loginSignup"))" class="nav-link">Login</a>
                <div class="cart-icon">üõí</div>
            </div>
        </nav>
    </NotAuthorized>
</AuthorizeView>

@code {
    private async Task Logout()
    {
        await JSRuntime.InvokeVoidAsync("localStorage.removeItem", "username");
        await JSRuntime.InvokeVoidAsync("localStorage.removeItem", "isLoggedIn");

        await AuthStateProvider.MarkUserAsLoggedOut();
        Navigation.NavigateTo("/loginSignup", forceLoad: false);
    }

    private void NavigateTo(string path)
    {
        Navigation.NavigateTo(path, forceLoad: false);
    }
}