@namespace TechStore.Frontend.Shared
@inject NavigationManager Navigation
@inject CustomAuthStateProvider AuthStateProvider
@using Microsoft.AspNetCore.Components.Authorization
@inject IJSRuntime JSRuntime
@inject HttpClient Http

<AuthorizeView>
    <Authorized Context="authContext">
        <nav class="navbar">
            <div class="nav-left">
                <h1 class="logo">Tech Store</h1>
            </div>
            <div class="nav-center">
                <input type="text" placeholder="Search..." class="search-bar" />
                <button class="search-button">üîç</button>
            </div>
            <div class="nav-right">
                <a @onclick="@(() => NavigateTo("/home"))" class="nav-link">Home</a>
                <a @onclick="@(() => NavigateTo("/topselling"))" class="nav-link">Top Selling</a>
                <a @onclick="@(() => NavigateTo("/products"))" class="nav-link">Products</a>
                <a @onclick="@(() => NavigateTo("/faqs"))" class="nav-link">FAQs</a>

                @if (authContext.User.IsInRole("superuser"))
                {
                    <a @onclick="@(() => NavigateTo("/admin"))" class="nav-link">Admin</a>
                }

                <!-- Profile Picture and Link -->
                <a @onclick="@(() => NavigateTo($"/profile/{Username}"))" class="nav-link profile-link">
                    @if (!string.IsNullOrEmpty(profileImage))
                    {
                        <img src="data:image/png;base64,@profileImage" alt="Profile Image" class="profile-icon" />
                    }
                    else
                    {
                        <img src="images/default-pfp.png" alt="Default Profile Image" class="profile-icon" />
                    }
                </a>

                <a @onclick="@Logout" class="nav-link">Logout</a>
                <div class="cart-icon" @onclick="GoToCart" title="View Cart">üõí</div>
            </div>
        </nav>
    </Authorized>
    <NotAuthorized>
        <nav class="navbar">
            <div class="nav-left">
                <h1 class="logo">Tech Store</h1>
            </div>
            <div class="nav-center">
                <input type="text" placeholder="Search..." class="search-bar" />
                <button class="search-button">üîç</button>
            </div>
            <div class="nav-right">
                <a @onclick="@(() => NavigateTo("/loginSignup"))" class="nav-link">Login</a>
                <a @onclick="@(() => NavigateTo("/faqs"))" class="nav-link">FAQs</a>

                <div class="cart-icon">üõí</div>
            </div>
        </nav>
    </NotAuthorized>
</AuthorizeView>

@code {
    private string Username = "";
    private bool isAuthenticated;
    private string profileImage = "";  // Base64 string for the profile image
    private void GoToCart()
    {
        Navigation.NavigateTo("/cart");
    }

    protected override async Task OnInitializedAsync()
    {
        var state = await AuthStateProvider.GetAuthenticationStateAsync();
        isAuthenticated = state.User.Identity?.IsAuthenticated ?? false;

        if (isAuthenticated)
        {
            Username = state.User.Identity.Name;  // Assuming the user's name is the username
            await LoadProfileImage();  // Load the profile image if available
        }
    }

    private async Task LoadProfileImage()
    {
        try
        {
            var profile = await Http.GetFromJsonAsync<ProfileData>($"profile/{Username}");
            if (profile != null && !string.IsNullOrEmpty(profile.ImageBase64))
            {
                profileImage = profile.ImageBase64;  // Store the base64 encoded image
            }
        }
        catch (Exception ex)
        {
            // Handle any error in fetching the profile data
            Console.WriteLine($"Error loading profile image: {ex.Message}");
        }
    }

    private async Task Logout()
    {
        await JSRuntime.InvokeVoidAsync("localStorage.removeItem", "username");
        await JSRuntime.InvokeVoidAsync("localStorage.removeItem", "isLoggedIn");

        await AuthStateProvider.MarkUserAsLoggedOut();
        Navigation.NavigateTo("/loginSignup", forceLoad: false);
    }

    private void NavigateTo(string path)
    {
        Navigation.NavigateTo(path, forceLoad: false);
    }

    class ProfileData
    {
        public string Uname { get; set; }
        public string Name { get; set; }
        public string? ImageBase64 { get; set; } // Base64 encoded profile image
        public double WalletBalance { get; set; }
        public int ItemsBought { get; set; }
        public int TotalTransactions { get; set; }
    }
}
